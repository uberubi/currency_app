{"version":3,"sources":["components/Header/Header.jsx","components/RateList/RateList.jsx","api/api.js","redux/currencies-reducer.js","components/RateList/RateListContainer.jsx","redux/convertor-reducer.js","utils/convertion.js","components/Convertor/Convertor.jsx","components/Convertor/ConvertorContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["Header","props","className","styles","header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","to","RateList","currenciesSpread","currencies","sort","map","currency","key","CharCode","Nominal","Name","Value","Previous","toFixed","favoriteCurrencies","some","cur","ID","Button","size","onClick","removeFavoriteCurrency","addFavoriteCurrency","lastUpdate","Table","striped","bordered","hover","currenciesAPI","axios","initialState","currenciesReducer","state","action","type","date","filter","c","compose","connect","getCurrencies","dispatch","then","response","Date","data","Timestamp","toLocaleString","Object","values","Valute","setLastUpdate","useEffect","inputCurrency","outputCurrency","currencyFrom","selectedCurOutput","convertorReducer","input","output","select","currencyTo","findConvertedCurrency","curFromNumber","currencyRateTo","currencyRateFrom","findCurrency","allCurrencies","curName","find","Convertor","useState","currenciesList","setInputCurrency","setOutputCurrency","setCurrencyFrom","setCurrencyTo","isCurrencyFromSelected","setIsCurrencyFromSelected","isCurrencyToSelected","setIsCurrencyToSelected","currenciesElement","Jumbotron","Container","Row","Col","Form","Group","Label","Control","as","onChange","e","currentTarget","value","defaultValue","disabled","min","curFromName","curToName","toConvert","readOnly","convertor","getConvertorList","App","exact","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","localStorage","getItem","JSON","parse","reHydrateStore","applyMiddleware","thunkMiddleware","getState","next","result","setItem","stringify","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a784d58.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Header.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"/ratelist\">RATES&CONVERT</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mx-auto font-weight-bold\">\r\n            <NavLink className=\"nav-link mr-5\" to=\"/convertor\">\r\n              CONVERTOR\r\n            </NavLink>\r\n            <NavLink className=\"nav-link\" to=\"/ratelist\">\r\n              EXCHANGE RATES\r\n            </NavLink>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\nconst RateList = (props) => {\r\n  let currenciesSpread = props.currencies.sort().map((currency) => (\r\n    <tr key={currency.CharCode}>\r\n      <td>{currency.Nominal}</td>\r\n      <td>{currency.Name}</td>\r\n      <td>{currency.Value}</td>\r\n      <td>({(currency.Value - currency.Previous).toFixed(1)})</td>\r\n      <td>\r\n        {props.favoriteCurrencies.some((cur) => cur.ID === currency.ID) ? (\r\n          <Button size=\"sm\" variant=\"danger\" onClick={() => props.removeFavoriteCurrency(currency)}>\r\n            удалить\r\n          </Button>\r\n        ) : (\r\n          <Button size=\"sm\" variant=\"success\" onClick={() => props.addFavoriteCurrency(currency)}>добавить</Button>\r\n        )}\r\n      </td>\r\n    </tr>\r\n  ));\r\n\r\n  let favoriteCurrencies = props.favoriteCurrencies.map((currency) => {\r\n    return (\r\n      <tr key={currency.CharCode}>\r\n        <td>{currency.Nominal}</td>\r\n        <td>{currency.Name}</td>\r\n        <td>{currency.Value}</td>\r\n        <td>({(currency.Value - currency.Previous).toFixed(1)})</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <h4 className=\"mt-3 text-uppercase text-center\">КУРС ЦБ РФ</h4>\r\n      <h5><center>Избранные валюты</center></h5>\r\n      <div>Последнее обновление: {props.lastUpdate}</div>\r\n      <Table  size=\"sm\" striped bordered hover variant=\"light\" className=\"text-center\">\r\n        <thead className=\"text-center\">\r\n        \r\n          <tr>\r\n            <th>Единиц</th>\r\n            <th>Валюта</th>\r\n            <th>Курс</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{favoriteCurrencies ? favoriteCurrencies : \"\"}</tbody>\r\n      </Table>\r\n      <h5><center>Список валют</center></h5>\r\n      <Table size=\"sm\" striped bordered hover variant=\"light\" className=\"text-center\">\r\n        <thead>\r\n          <tr>\r\n            <th>Единиц</th>\r\n            <th>Валюта</th>\r\n            <th>Курс</th>\r\n            <th></th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{currenciesSpread}</tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RateList;\r\n","import * as axios from \"axios\";\r\n\r\nexport const currenciesAPI = {\r\n  getAvaibleCurrencies() {\r\n    return axios.get(\"https://www.cbr-xml-daily.ru/daily_json.js\")\r\n  }\r\n};\r\n\r\n","import { currenciesAPI } from \"../api/api\";\r\n\r\nconst SET_CURRENCIES = \"SET_CURRENCIES\";\r\nconst SET_LAST_UPDATE = \"SET_LAST_UPDATE\";\r\nconst ADD_FAVORITE_CURRENCY = \"ADD_FAVORITE_CURRENCY\";\r\nconst REMOVE_FAVORITE_CURRENCY = \"REMOVE_FAVORITE_CURRENCY\";\r\n\r\nlet initialState = {\r\n  currencies: [],\r\n  lastUpdate: \"\",\r\n  favoriteCurrencies: [],\r\n};\r\n\r\nconst currenciesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENCIES:\r\n      return { ...state, currencies: action.currencies };\r\n      // return { ...state, currencies: Object.values([...action.currencies, ...state.currencies].reduce((acc, n) => (!acc[n.ID] && (acc[n.ID] = n), acc), {})) };\r\n    case SET_LAST_UPDATE:\r\n      return { ...state, lastUpdate: action.date };\r\n    case ADD_FAVORITE_CURRENCY:\r\n      return {\r\n        ...state,\r\n        favoriteCurrencies: [...state.favoriteCurrencies, action.currency],\r\n      };\r\n    case REMOVE_FAVORITE_CURRENCY:\r\n      return {\r\n        ...state,\r\n        favoriteCurrencies: state.favoriteCurrencies.filter((c) => c.ID !== action.currency.ID),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setCurrencies = (currencies) => ({ type: SET_CURRENCIES, currencies });\r\nexport const setLastUpdate = (date) => ({ type: SET_LAST_UPDATE, date });\r\nexport const addFavoriteCurrency = (currency) => ({ type: ADD_FAVORITE_CURRENCY, currency });\r\nexport const removeFavoriteCurrency = (currency) => ({ type: REMOVE_FAVORITE_CURRENCY, currency });\r\n\r\nexport const getCurrencies = () => (dispatch) => {\r\n  currenciesAPI.getAvaibleCurrencies().then((response) => {\r\n    let date = new Date(response.data.Timestamp).toLocaleString();\r\n    dispatch(setCurrencies(Object.values(response.data.Valute)));\r\n    dispatch(setLastUpdate(date));\r\n  });\r\n};\r\n\r\nexport default currenciesReducer;\r\n","import React, { useEffect } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport RateList from \"./RateList\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getCurrencies,\r\n  addFavoriteCurrency,\r\n  removeFavoriteCurrency,\r\n} from \"../../redux/currencies-reducer\";\r\n\r\nconst RateListContainer = (props) => {\r\n  \r\n  useEffect(() =>  props.getCurrencies(), []);\r\n\r\n  return <RateList {...props} />;\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    currencies: state.currencies.currencies,\r\n    lastUpdate: state.currencies.lastUpdate,\r\n    favoriteCurrencies: state.currencies.favoriteCurrencies,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getCurrencies, addFavoriteCurrency, removeFavoriteCurrency })(\r\n    RateListContainer\r\n  )\r\n);\r\n","import { currenciesAPI } from \"../api/api\";\r\n\r\nconst SET_CONVERTOR_LIST = \"SET_CONVERTOR_LIST\";\r\nconst SET_INPUT_CUR = \"SET_INPUT_CUR\";\r\nconst SET_OUTPUT_CUR = \"SET_OUTPUT_CUR\";\r\nconst SET_CURRENCY_FROM = \"SET_CURRENCY_FROM\";\r\nconst SET_CURRENCY_TO = \"SET_CURRENCY_TO\";\r\n\r\nlet initialState = {\r\n  currencies: [],\r\n  inputCurrency: '0',\r\n  outputCurrency: '0',\r\n  currencyFrom: \"USD\",\r\n  selectedCurOutput: \"EUR\",\r\n};\r\n\r\nconst convertorReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CONVERTOR_LIST:\r\n      return { ...state, currencies: action.currencies };\r\n    case SET_INPUT_CUR:\r\n      return { ...state, inputCurrency: action.input };\r\n    case SET_OUTPUT_CUR:\r\n      return { ...state, outputCurrency: action.output };\r\n      case SET_CURRENCY_FROM:\r\n        return { ...state,  currencyFrom: action.select}\r\n      case SET_CURRENCY_TO:\r\n        return { ...state,  selectedCurOutput: action.currencyTo}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setConvertorList = (currencies) => ({ type: SET_CONVERTOR_LIST, currencies });\r\nexport const setInputCurrency = (input) => ({ type: SET_INPUT_CUR, input });\r\nexport const setOutputCurrency = (output) => ({ type: SET_OUTPUT_CUR, output });\r\nexport const setCurrencyFrom = (select) => ({ type: SET_CURRENCY_FROM, select });\r\nexport const setCurrencyTo = (select) => ({ type: SET_CURRENCY_TO, select });\r\n\r\nexport const getConvertorList = () => (dispatch) => {\r\n  currenciesAPI.getAvaibleCurrencies().then((response) => {\r\n    dispatch(setConvertorList(Object.values(response.data.Valute)));\r\n  });\r\n};\r\n\r\nexport default convertorReducer;\r\n","export const toConvert = (curFromName, curToName, curFromNumber, currenciesList) => {\r\n  let curToNumber;\r\n\r\n  if (curFromName === \"Российский Рубль\") {\r\n    curToNumber = (curFromNumber / findCurrency(currenciesList, curToName).Value) * findCurrency(currenciesList, curToName).Nominal;\r\n    return curToNumber.toFixed(2);\r\n  } else if (curToName === \"Российский Рубль\") {\r\n    curToNumber = (curFromNumber * findCurrency(currenciesList, curFromName).Value) / findCurrency(currenciesList, curFromName).Nominal;\r\n    return curToNumber.toFixed(2);\r\n  }\r\n  \r\n  let currencyRateFrom = findCurrency(currenciesList, curFromName).Value / findCurrency(currenciesList, curFromName).Nominal;\r\n  let currencyRateTo = findCurrency(currenciesList, curToName).Value / findCurrency(currenciesList, curToName).Nominal;\r\n\r\n  curToNumber = findConvertedCurrency(curFromNumber, currencyRateTo, currencyRateFrom)\r\n\r\n  return curToNumber;\r\n};\r\n\r\n\r\n\r\nconst findConvertedCurrency = (curFromNumber, currencyRateTo, currencyRateFrom) => {\r\n  let convertedCurrency = curFromNumber / (currencyRateTo / currencyRateFrom)\r\n  return convertedCurrency.toFixed(2)\r\n}\r\n\r\nconst findCurrency = (allCurrencies, curName) => {\r\n  let currency = allCurrencies.find(c => c.Name === curName)\r\n  return currency\r\n}","import React, { useState } from \"react\";\r\nimport { toConvert } from \"../../utils/convertion\";\r\nimport { Jumbotron, Form, Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst Convertor = (props) => {\r\n  let [currenciesList] = useState(props.currencies);\r\n  let [inputCurrency, setInputCurrency] = useState(props.inputCurrency);\r\n  let [outputCurrency, setOutputCurrency] = useState(props.outputCurrency);\r\n  let [currencyFrom, setCurrencyFrom] = useState(props.currencyFrom);\r\n  let [currencyTo, setCurrencyTo] = useState(props.currencyTo);\r\n  let [isCurrencyFromSelected, setIsCurrencyFromSelected] = useState(false);\r\n  let [isCurrencyToSelected, setIsCurrencyToSelected] = useState(false);\r\n\r\n  const onInputChange = (e) => {\r\n    setInputCurrency(e.currentTarget.value);\r\n    setOutputCurrency(toConvert(currencyFrom, currencyTo, e.currentTarget.value, currenciesList));\r\n  };\r\n\r\n  const onOptionChangeFrom = (e) => {\r\n    setIsCurrencyFromSelected(true);\r\n    setInputCurrency(0);\r\n    setOutputCurrency(0);\r\n    setCurrencyFrom(e.currentTarget.value);\r\n  };\r\n\r\n  const onOptionChangeTo = (e) => {\r\n    setIsCurrencyToSelected(true);\r\n    setInputCurrency(0);\r\n    setOutputCurrency(0);\r\n    setCurrencyTo(e.currentTarget.value);\r\n  };\r\n\r\n  let currenciesElement = props.currencies.map((currency) => (\r\n    <option key={currency.CharCode}>{currency.Name}</option>\r\n  ));\r\n\r\n  return (\r\n    <Jumbotron>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h3>FROM</h3>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  onChange={onOptionChangeFrom}\r\n                  defaultValue=\"Выберите валюту\"\r\n                >\r\n                  <option disabled>Выберите валюту</option>\r\n                  <option>Российский Рубль</option>\r\n                  {currenciesElement}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control\r\n                  as=\"input\"\r\n                  type=\"number\"\r\n                  disabled={!(isCurrencyFromSelected && isCurrencyToSelected)}\r\n                  min=\"0\"\r\n                  value={inputCurrency}\r\n                  onChange={onInputChange}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Col>\r\n          <Col>\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h3>TO</h3>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  onChange={onOptionChangeTo}\r\n                  defaultValue=\"Выберите валюту\"\r\n                >\r\n                  <option disabled>Выберите валюту</option>\r\n                  <option>Российский Рубль</option>\r\n                  {currenciesElement}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control as=\"input\" value={outputCurrency} disabled={true} readOnly />\r\n              </Form.Group>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Convertor;","import React, { useEffect } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { getConvertorList, setInputCurrency, setCurrencyFrom, setCurrencyTo } from \"../../redux/convertor-reducer\";\r\nimport Convertor from \"./Convertor\";\r\n\r\nconst ConvertorContainer = (props) => {\r\n  useEffect(() => {\r\n    props.getConvertorList();\r\n  }, []);\r\n\r\n  return <Convertor {...props} />;\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    currencies: state.convertor.currencies,\r\n    inputCurrency: state.convertor.inputCurrency,\r\n    outputCurrency: state.convertor.outputCurrency,\r\n    currencyFrom: state.convertor.currencyFrom,\r\n    currencyTo: state.convertor.currencyTo\r\n  };\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, { getConvertorList, setInputCurrency, setCurrencyFrom, setCurrencyTo })(ConvertorContainer));\r\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport RateListContainer from \"./components/RateList/RateListContainer\";\nimport ConvertorContainer from \"./components/Convertor/ConvertorContainer\";\nimport { Container, Jumbotron } from \"react-bootstrap\";\n\nconst App = (props) => {\n  return (\n    <Container>\n      <Header />\n      <Jumbotron>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to={\"/ratelist\"}/> } />\n          <Route path=\"/convertor\" render={() => <ConvertorContainer />} />\n          <Route path=\"/ratelist\" render={() => <RateListContainer />} />\n          <Route path='*'render={() => <div>404 NOT FOUND</div>}/>\n        </Switch>\n      </Jumbotron>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport currenciesReducer from \"./currencies-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport convertorReducer from \"./convertor-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n  currencies: currenciesReducer,\r\n  convertor: convertorReducer\r\n});\r\n\r\nconst localStorageMiddleware = ({ getState }) => {\r\n  return (next) => (action) => {\r\n    const result = next(action);\r\n    localStorage.setItem(\"applicationState\", JSON.stringify(getState()));\r\n    return result;\r\n  };\r\n};\r\n\r\nconst reHydrateStore = () => {\r\n\r\n  if (localStorage.getItem(\"applicationState\") !== null) {\r\n    return JSON.parse(localStorage.getItem(\"applicationState\")); // re-hydrate the store\r\n  }\r\n};\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  reHydrateStore(),\r\n  composeEnhancers(applyMiddleware(thunkMiddleware, \r\n    localStorageMiddleware\r\n    ))\r\n);\r\nwindow.store = store;\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}